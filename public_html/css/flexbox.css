/*Code borrowed from week 3 lecture*/
/*layout*/
*, *::after, *::before {
  box-sizing:border-box;
}

.box {

	/*
		The statement below sets us into the flexbox display mode. Note support for flexbox still necessitates some vendor prefixes (see http://caniuse.com/#search=flex)
	*/
	display: -webkit-flex; /* For support in a series of Webkit browsers */
	display: -ms-flex; /* For support in IE 10 */
	display: flex;

	/*
		A flexbox will try to fit all elements in one line by default. The 'flex-wrap' property lets us wrap child elements that become too wide for their current row.
	*/
	-webkit-flex-wrap: wrap;
	-ms-flex-wrap: wrap;
	flex-wrap: wrap;

	/*
		To get our flexbox to change how elements are spanned across the remaining space, we can use the 'justify-content' property. In this case, we are specifying that we want the extra space to be balanced around our elements.
	*/
	-webkit-justify-content: space-around;
	-ms-justify-content: space-around;
	justify-content: space-around;

}

.container{
  display: -ms-flex;
  display:flex;
  -ms-flex-wrap:wrap;
  flex-wrap: wrap;
}

/*Navgation Bar*/
.block{
  -ms-flex-grow:1;
  flex-grow: 1;

  -ms-flex-basis:10em;
  flex-basis:10em;

  margin-left: 3rem;
}

.footer-block{
  -ms-flex-grow:1;
  flex-grow: 1;

  -ms-flex-basis:10em;
  flex-basis:10em;
  text-align: center;

  /*margin-left: 3rem;*/
}

/*Banner Image*/
.block-2{
   max-width: 100%;
}

.container-2{
 width: 100%;
}

.container .block{
  background-color: rgb(25, 26, 30);
}

.container-2 img {
  display: block;
}

.container-3{
  display: -ms-flex;
  display:flex;
  -ms-flex-wrap:wrap;
  flex-wrap: wrap;
}

 /*Featured Items*/
.block-3{
  -ms-flex-grow:1;
  flex-grow: 1;

  -ms-flex-basis:10em;
  flex-basis:10em;
  /*margin: 2em;*/

  padding: 1.5em 1.5em;
  margin-top: 2rem;
  margin-bottom: 2rem;
  margin-left: 4rem;
  /*margin-right: 3rem;*/
}


.block-4{
   max-width: 100%;
}

/*Column for paragraph text in aboutus.html*/
.block-5 {

  -ms-flex-grow:1;
  flex-grow: 1;

  /*-ms-flex-basis:5em;
  flex-basis:5em;*/
}

.container-4{
display: -ms-flex;
display:flex;
-ms-flex-wrap:wrap;
flex-wrap: wrap;
background-color: rgb(12, 13, 15);
margin-top: 10rem;
margin-bottom: -2rem;
padding: 5rem;
font-size: 1.4em;
width: 100%;

}

/*Featured Items*/
/*.block-footer{
  display: -ms-flex;
  display:flex;
  -ms-flex-wrap:wrap;
  flex-wrap: wrap;
 -ms-flex-grow:1;
 flex-grow: 1;

 -ms-flex-basis:10em;
 flex-basis:10em;
 /*margin: 2em;*/

 /*margin-right: 3rem;
 border-right: 1px solid gray;
 max-height: 20.6%;*/

/*}*/

.box-item-image {
	/*
		Given we are working with an image, in this case we have set a flex-basis value that is a pixel value to reflect the 'minimum' width of the image before the flexbox reflows and stacks the elements inside. Additionally, the use of a flex-grow value of 3 ensures that our image is 'heavier' (will take up more space) when available.
	*/
	-webkit-flex: 1 1 400px;
	-ms-flex: 1 1 400px;
	flex: 1 1 400px;
  text-align: center;
  margin-top: 2em;
  /*max-width: 100%*/
}


.box-item-text {
	/*
		For the text, we want it to behave a bit differently, in this case setting an em value for its flex-basis. Using a 1 for the flex-grow value means it weighs less in comparison to our image, and will take less space when possible.
	*/
	-webkit-flex: 1 1 400px;
	-ms-flex: 1 1 400px;
	flex: 1 1 400px;
  margin-right: 6em;
  margin-left: 2em;
}


.container-5{
  display: -ms-flex;
  display:flex;
  -ms-flex-wrap:wrap;
  flex-wrap: wrap;
  max-width: 100%;
  background-color: rgb(10, 31, 35);
  border: 1px solid black;
  text-align: center;
  max-height: 100%;
}


.block-5{
  -ms-flex-grow:1;
  flex-grow: 1;

  -ms-flex-basis:10em;
  flex-basis:10em;

  padding-bottom: 2rem;

  /*margin-left: 3rem;
  margin-right: 3rem;*/
}


.container-6{
display: -ms-flex;
display:flex;
-ms-flex-wrap:wrap;
flex-wrap: wrap;
/*background-color: rgb(12, 13, 15);*/
margin-top: 2rem;
/*margin-bottom: -10rem;*/
/*padding: 7rem;*/
/*font-size: 1.4em;*/
width: 100%;
text-align: center;
/*max-width: 500px;*/
}

.block-6{
  /*-ms-flex-grow:1;
  flex-grow: 1;*/
  text-align: center;
  -ms-flex-basis:10em;
  flex-basis:10em;
  align-items: center;
  font-size: 3rem;
  margin-left: 1em;
  margin-right: 1em;
  /*padding:0.3em 5em;*/
  width:100%;
}

/*.block-7{
  max-width: 100%;
  /*margin-left: 2em;
  margin-right: 2em;

}*/

.container-7{
  display: -ms-flex;
  display:flex;
  -ms-flex-wrap:wrap;
  flex-wrap: wrap;
}

/*Navgation Bar*/
.block-7{
  -ms-flex-grow:1;
  flex-grow: 1;
  /*max-width: 400px;*/
  /*background-color: rgb(23, 24, 28);*/
  /*-ms-flex-basis:10em;
  flex-basis:10em;*/
  margin-top: 30px;
  padding: 1em 1em;
  margin-left: 3rem;

}

.container-8{
/*background-color: rgb(12, 13, 15);*/
margin-top: -8rem;
margin-bottom: -2rem;
padding: 7rem;
font-size: 3.4em;
width: 100%;
text-align: center;
}

.block-8{
  -ms-flex-grow:1;
  flex-grow: 1;
  /*max-width: 400px;*/
  /*background-color: rgb(23, 24, 28);*/
  /*-ms-flex-basis:10em;
  flex-basis:10em;*/
  padding: 1em 1em;
  margin-left: 1rem;
  max-width: 100%;
}

.container-9{
margin-bottom: -2rem;
padding: 1rem;
width: 100%;
text-align: center;
}


@media (min-width: 927px) {
	/*
		The flexbox 'order' property lets us re-order items	as they are flowed. Smaller values position items closer to the top, or to the left, higher values place them near the end, or to the right. Depending on the orientation of the flexbox flow.
	*/
	.box-item-image {
		-webkit-order: 2;
		-ms-order: 2;
		order: 2;
	}
}

@media (max-width: 1407px) {
	/*
		The flexbox 'order' property lets us re-order items	as they are flowed. Smaller values position items closer to the top, or to the left, higher values place them near the end, or to the right. Depending on the orientation of the flexbox flow.
	*/

.block:nth-of-type(1){
    display: block;
    margin-right: 1000px;
    text-align: center;
  }

}

@media (max-width: 958px) {
	/*
		The flexbox 'order' property lets us re-order items	as they are flowed. Smaller values position items closer to the top, or to the left, higher values place them near the end, or to the right. Depending on the orientation of the flexbox flow.
	*/

.block{
    /*text-align: center;*/
    -ms-flex-basis:15em;
    flex-basis:15em;
    margin-left: 3rem;
  }

}

@media (max-width: 1507px) {
	/*
		The flexbox 'order' property lets us re-order items	as they are flowed. Smaller values position items closer to the top, or to the left, higher values place them near the end, or to the right. Depending on the orientation of the flexbox flow.
	*/
  .footer-block{
    -ms-flex-grow:1;
    flex-grow: 1;

    -ms-flex-basis:20em;
    flex-basis:20em;
    text-align: center;

    /*margin-left: 3rem;*/
  }



}


/*@media screen and (min-width: 600px) {
  .container {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
  }
  .block{
    width:25%;
  }

}*/
